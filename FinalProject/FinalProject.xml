<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FinalProject</name>
    </assembly>
    <members>
        <member name="M:FinalProject.Controllers.AccountController.Register(FinalProject.ApiModels.RegisterModel)">
            <summary>
            Endpoint for New User Registration
            </summary>
            <param name="registerDTO">Provide New User's email address, Password and Password Confirmation</param>
            <returns>
            The Generated Email Confirmation Token that will be used in /account/confirmEmail
            </returns>
            <response code="200">Return the generated email confirmation token to be used in /account/confirmEmail </response>
            <response code="400">When request is invalid due to invalid email address, email address already taken, password not match or password requirements not met,</response>
        </member>
        <member name="M:FinalProject.Controllers.AccountController.ConfirmEmail(FinalProject.ApiModels.ConfirmEmailModel)">
            <summary>
            For Confirming User's email address after registration
            </summary>
            <param name="confirmEmailDTO">Provide the User's email address and Confirmation Token</param>
            <returns></returns>
            <response code="200">The confirmation is successful</response>
            <response code="400">Invalid confirmation token provided</response>
            <response code="404">Unable to load user with the provided email address</response>
        </member>
        <member name="M:FinalProject.Controllers.AccountController.Login(FinalProject.ApiModels.LoginModel)">
            <summary>
            Use this endpoint to generate JWT token
            </summary>
            <param name="loginDTO">Provide valid email and password</param>
            <returns></returns>
            <response code="200">Request is succesfull, returns generated JWT Token</response>
            <response code="400">Request failed due to invalid credentials or unconfirmed email address provided.</response>
        </member>
        <member name="M:FinalProject.Controllers.ItemsController.GetAll">
            <summary>
            Get all items from the database.
            </summary>
            <returns></returns>
            <response code="200">Succeful request, returns the items from the database as a collection</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.ItemsController.Get(System.Int32)">
            <summary>
            Get an specific item using Item ID
            </summary>
            <param name="itemId">The Item's ID</param>
            <returns></returns>
            <response code="200">Item was found!</response>
            <response code="401">Request unauthorized</response>
            <response code="404">Item does not exist!</response>
        </member>
        <member name="M:FinalProject.Controllers.ItemsController.Create(FinalProject.ApiModels.ItemModel)">
            <summary>
            For creating a new item record
            </summary>
            <param name="createItemModel">The Item details</param>
            <returns></returns>
            <response code="200">The request was succeful, returns the item created with the ID</response>
            <response code="400">The request failed due to the item name already existing or invalid request payload.</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.ItemsController.Update(System.Int32,FinalProject.ApiModels.ItemModel)">
            <summary>
            For updating an existing item, [ItemExistActionFilter]
            </summary>
            <param name="itemId">The ID of the item to be updated</param>
            <param name="updateItemModel">contains update for Item Name, Stocks, and Unit Price</param>
            <returns></returns>
            <response code="200">Item updated succesfully</response>
            <response code="400">Failed to update item</response>
            <response code="401">Request unauthorized</response>
            <response code="404">Item with the provided ID does not exist</response>
        </member>
        <member name="M:FinalProject.Controllers.ItemsController.Delete(System.Int32)">
            <summary>
            Delete an Item by ID, [ItemExistActionFilter]
            </summary>
            <param name="itemId">The ID of the Item to be deleted</param>
            <returns></returns>
            <response code="200">Item have been deleted succefully</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.GetAll">
            <summary>
            Get All Orders
            </summary>
            <returns></returns>
            <response code="200">Returns all orders from the database</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.GetAllForUser">
            <summary>
            Get All Orders for the current User
            </summary>
            <returns></returns>
            <response code="200">Returns all orders created by the current user</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.Get(System.Int32)">
            <summary>
            Get an Specific Order by ID
            </summary>
            <param name="orderId">ID of the Order</param>
            <returns></returns>
            <response code="200">Returns the specific Order record</response>
            <response code="401">Request unauthorized</response>
            <response code="404">Order record not found</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.Create(FinalProject.ApiModels.CreateOrderModel)">
            <summary>
            Endpoint for creating Order, [ItemExistActionFilter], [ItemHasStocksActionFilter]
            </summary>
            <param name="model">Contains the Item ID and Quantity</param>
            <returns></returns>
            <response code="200">Order creatd succefully</response>
            <response code="404">Item with the specified ID was not found!</response>
            <response code="400">Invalid request payload</response>
            <response code="401">Request unauthorized</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.Update(System.Int32,FinalProject.ApiModels.UpdateOrderModel)">
            <summary>
            For updating an order record, [ItemExistActionFilter], [ItemHasStocksActionFilter]
            </summary>
            <param name="orderId">The ID of the Order to be updated</param>
            <param name="model">contains new Item ID or new Quantity or new Status of the order</param>
            <returns></returns>
            <response code="200">Order was succefully updated</response>
            <response code="401">Request unauthorized</response>
            <response code="404">Item with the specified ID was not found!</response>
            <response code="400">Invalid request payload</response>
        </member>
        <member name="M:FinalProject.Controllers.OrdersController.Delete(System.Int32)">
            <summary>
            For deleting an order
            </summary>
            <param name="orderId">The ID of the order to be deleted</param>
            <returns></returns>
            <response code="200">Order has been deleted succefully</response>
        </member>
        <member name="T:FinalProject.Middleware.HeaderValidationExtension">
            <summary>
            Static class to register this middleware into the application.
            </summary>
        </member>
        <member name="T:FinalProject.Middleware.HeaderValidation">
            <summary>
            Middleware class to implement header validation.
            </summary>
        </member>
        <member name="M:FinalProject.Middleware.HeaderValidation.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="next"><see cref="T:Microsoft.AspNetCore.Http.RequestDelegate"/> automatically passed by the pipeline.</param>
        </member>
        <member name="M:FinalProject.Middleware.HeaderValidation.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Method that is used by the pipeline to execute this middleware.
            </summary>
            <param name="context">Context automatically injected by the request pipeline.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
            <remarks>Accept-Charset is forbidden to be modified, hence it is not included in the validation.</remarks>
        </member>
    </members>
</doc>
